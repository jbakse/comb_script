# # # # # # # # # # # # # # # # # # # # # # # # # # 
# Todo

# # # # # # # # # # # # # # # # # # # # # # # # # # 
# Bugs

+-----	all those google drive errors in console!
----- BUILD DOCS
----- NEW "server" SOLUTION


# # # # # # # # # # # # # # # # # # # # # # # # # # 
# User facing Features

# General
+-----	Keyboard browser navigation: might need to be disabled, hitting delete or command-brackets is common in an editor and if the wrong thing is focused, you leave the page
	
# Preview
---	Let user Pan
	
	+--- prevent sticky mouse pan
	+--- prevent text selection during pan

---	Let user Zoom
	--- scroll wheel zoom
	+---- keyboard command zoom
	--- tool bar magnifying glass?
	--- option key maginfying glass cursor?
	+---- zoom aware pan

+----	Don't screw up pan on code changes

-	Isolation Mode? 
---	Auto Pan and Zoom on code under text cursor?
-	Ghost unselected regions?
--	Click on covered items: right now a large box over small box prevents selection of small box

# Inspector
--	List dimensions in document unit

# Symbols/Mixins
-	Provide .comb specific way to reuse library items: instead of using yaml symbols, something like uses or inherit that pulls properties from another region

# File Management
-	Google Drive Save As?
+-----	Warn on navigation away from dirty file (prompt for sav)

# Math Expression support
	---	Possible Library: http://mathjs.org/docs/expressions/customization.html
	+---	Dimension Units
	---	Access Parent Bounds 
	+--	move evaluation to build/preview
	+--	parse in region also for validation?
	+--	(no)change the 'type' in the language files
	+--	should we rename/limit available variables to expressions)
	----	Make Examples + Document
		+- units
		+- simple math
		- parent boundary variables
		- constants
			- shadowing
			- referencing parent constants, but not own
		+- Mathjs

	----	constants: 
		----	DRY the math.eval stuff to check for input type, report errors, etc consistantly
	+----	Dry Code :(and maybe consider resolving contexts during inital load/parse instead of draw/preview (this will eliminate redundancy))

--	support percents
+---	Basic Maths
+---	Use document units

# Booleans
-	Review: how child_booleans vs self_booleans work, does it make sense?
-	Non-Boolean Paths: flag paths as inellegible for boolean (tries to fill in letters (sutton), letters cause issues in mixed situations, should be able to opt out of mixed booleans)
-	Many to Many: test document

# Syntax
-	Mirror
-	min/max width/height


# Type
-	Single Live vs Wrap
-	Scale?

# Polygon
--	Sizes: should follow provided bounds, maybe make radius optional, maybe consider fit/cover options

# Plugins
-	Vertical Line
-	Horizontal Line
-	Polygon as array of points
----	Pages Plugin that creates a stack of regions and sticks each child into one. See the hassle of laying out "parts" where thier position isn't actually important.

# SVG
-	SVG Import Support

# Export
---	Export Styles: finish+document
---	Support for Cut vs Etch vs Guide
--	Perserve Groups on Export?: Might at least be worth looking at having the tree represented in groups so they export nested?
--	Include source in exported .svg?


# UI
---	General Look? @Greg
---	Quick Reference: Some sort of context aware reference, listing legal properties/values, tooltips? @Greg

# # # # # # # # # # # # # # # # # # # # # # # # # # 
# Refactoring / Cleanup / Developer facing features

#Build Tool
--- 	Clean up gulp
- 	Interesting: http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/
+----	Versioning: Include the build number 0.0.12 on the interface, start bumping it!
-	Language YAMLs: are built with the build tool, should this be handled by the javascript? not sure
--	Browserify Dependencies: rather than script tags, do we want to?

-	1 file plugins: Right now, a regiom type (e.g. Rectangle) is added through a two files. a YAML that describes its use, and a js that implements its behavior. it would be cool for (simple) region types to be fully encapsulated in the YAML, kind of a literate approach

---	Update Libraries

--	Reorg examples
	/yaml + /svg are development/testing files we made to test featuers as we went (needs a cleaner organization)
	/src/examples are the examples available from the ide
	/src/docs/examples are the examples that show up in the api reference

	this orginization just needs total rethinking


# # # # # # # # # # # # # # # # # # # # # # # # # # 
# Developer Docs

--	Prod/Develpment Dependencies, how they are used, where they come from (bower, npm, direct, etc)

--	Project Directories


# # # # # # # # # # # # # # # # # # # # # # # # # # 
# User Docs

-	Document Mixed boolean mode: whole booelan system really

# # # # # # # # # # # # # # # # # # # # # # # # # # 
# Demo Projects

-	Drawbot
-	T-Slot Box



# # # # # # # # # # # # # # # # # # # # # # # # # # 
# Low Priority ? Wild Ideas

-	Might also be cool if plugin region types could be dynamically loaded from the .comb file "uses http://plugins/polygon.yaml"

-	sibling relative positioning: what are some options? named object relative positioning?

-	combined attributes: margin: 0 or margin: 0 10 20 10
