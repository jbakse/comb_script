# Clean Up Google Integration

----- http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/
----- Include the build number 0.0.12 on the interface, start bumping it!

+CSS
+Better encapsulation
+Better loading flow
+Close dirty file warnings

-----	all those google drive errors in console!


# Update Dependencies

+----	Learn and use Dependency manager? Bower?
lib holds most dependencies and was manually built. moving to using bower to list and pull dependencies
bower-installer moves the actual production file from bower-modules to test_lib. so `bower update` followed by `bower-installer` will update the libs. links from index.html (etc.) will need to be switched from lib to test-lib and checked.

+----	Make a test case for bad booleans, see if updating paper fixes.
	---- Still broken



BUGS:
+-	region_grid registration: top_left, top_right, etc is bugged and using the registration top_left, etc of the parent, not the individual region cells

+- when making an array of things if there’s no space between the dash and the variable name it won’t parse properly, and the and the warning displayed isn't very descriptive

+- boolean rendering sometimes renders funny in preview. Looks like it sometimes has trouble with innards of closed shapes. Export looks fine though even though the preview renders funny.

+- registration and 'text' regions are buggy on export. setting a registration to top left causes lower case o and p to mess up. probably some other letters as well. only visible on export.

+----- fix symetry

-- typing junk
+-- While editing files you might break something in the re-render and then have to reload. fix that. you should be able to type any old garbage. We might have to trash the whole damn paper/preview and rebuild to make sure. Nuke from orbit.

+----	Docs missing inherited properties?
.---	Docs might be better off with all properties minimized.

--- tries to fill in letters (sutton), letters cause issues in mixed situations, should be able to opt out of mixed booleans


For Sketching:
.---	Examples in App

---	Examples
	---	Drawbot Example
	---	T-Slot Box Example

--	Document Mixed boolean mode

-	Greg Font/Sutton
	+- Single Line
	- Wrap

--	Finish Docs
	+- Initial Overview
	+- API Reference
	-- tweak style

---	SVG Import
+---	Fix Refactoring related issues discovered building app examples

---	Comb Script -> CombScript
---	.yaml -> .comb

---	Deploy

-	export
	+---	correct size
	-	export style



@---	Finish Laguange Files for implemented classes.
@--	Write some general docs.
+--	Check to see if code can be cleaned up with use of default values.

+----- Might be able to fix yaml parse error line numbers by parsing without injection first to log errors.

--	consider how language works
	-	write the context derive / how regions work section of the docs
	-	mixed boolean mode
	--	decide.. first child booelan vs parent boolean vs parent then first child (how it works now)
	-	auto registration center? registration top, topleft, ect.
	-	transforms: scaleX, scaleY, translateX, translateY, rotation



-	refactoring
	+-	maybe just make calls on controller for now, these will be turned into having controller listen for dispatched events later. get some event dispatching in there to decouple user interaction mcv style
	--	language
		+-	language.js file that has the lists of regions types and their params etc. helpful in reporting issues after parse and might be tied into documentation system
		+-	having default objects could be useful in many places. for example a default document could have properties for most settings which could be overridden by a user document/ An empty children property that gets overridden would eliminate the need to check if children exists. in general if decended from defaults, checks for existing properties would be handled. region defaults etc.
		+-	lets make a language class, and maybe consider the language yaml-json data private to that class




	+-	injector
		+-	use indentation and child navigation to find end of region lines, get better data stored in editor properties to make selection code and display clearer
	
	+--	symmetry
		+-	kind of hate the issue where selecting a shape causes line to change, line change triggers non user initiated event.
		+-	might be improved by having idle, selected, and selected-key (the one you actualy clicked)

	-	drawing
		+-	lets move away from having regions/ellipses/rects etc have their own color, and more 	towards having a global colorscheme that they use. also consider colorcoding booelans. 
		+-	yeah the set style function is a mess
		+-	always draw the frame/build/export allow viewing in window
		.-	Looks like Region, might just be a `paper.Group` could potentially rebuild main "scene graph" approach with groups. Might be much better. (i'm thinking that there are reasons this wouldn't actually work, and anyway would be too major to be worth it)
		-	Might at least be worth looking at having the tree represented in groups so they export nested?

		.-- 	maybe it would be best to generate the contexts and store in children at build, but not generate the vectors until preview/build is called
		.-- 	but actually? maybe we can call preview just once and not ever draw again (we are redrawing now for export, but that might not be needed with new layer system, also we could create a whole new document if we need to redraw to a different target for export)

	-	export
		+-	 (export should respect document dimensions)

		+- Styles need for preview
			Shape
			Position (registration)
			Bounds (frame)
			*
			Selected (the instances the editor is on)
			Selected Key (the one that was clicked)
			Ghost (shapes outside the selected tree)
			Hover	(mouse is over)
			Idle (normal)

			Can these cascade a bit like css?

Introduciton
	Overview
	What is it? What is it for?
	YAML, Paperjs, 
	Declaritive vs Imparative
	Philosophy of not just describing what, but why.

Document Structure
	YAML, Nested, Properties, Children

How regions work. 
	 boundries/registration/etc work
	 most things are regions

Combining Shapes
	How booleans work.

Document all properties on all region types.
	Document and Example

YAML functions (Symbols)
	

Exporting
	Export Styles
	



@	Features
	--	Region
		+--- registration: Parent | Center | Top | Top_Left | etc.
		--         #do we want to have a registrationX and registrationY? if we're going to have a top_left it might make things easier


	--	Context System
		--	Bounds
			--	might want a way to set center and width for bounds (best way for drill holes) (can be done with a single nest to transform for now.
		+---	Determine Regsitration (move registration point, but preserves position of bounds relative to parent)
		+---	Apply Transforms
			+-	translate_x, translate_y
			+-	rotation
			+-	scale, scale_x, scale_y

	--	Region Grid
		+---	proxies

	--	Dimension Units
		+--- LVP document settings includes a `unit` and scales the drawing to achieve (like how drawbot.yaml did it)
		+--- inspector
		---- mixed demensions
			---- Allow Dimensions units in dimensional properties
			---- Allow default unit (used for numbers without units, used in inspector)


	---	Documentation
		---	General Conceptual Docs
		---	Language Reference
		---	Examples

	---	Greg Font

	--	Per Child Boolean
		-- Add some tabs, remove some notches

	-	import svg
		+-	basic
		-	scale doc to bounds, scale art to bounds
		-	greg font / text region

	----	pan/zoom
		+-	pan
		----	pan preserved on rebuild
		----	zoom

	----	focus on current
		----	pan/zoom preview to show region where cursor is
		----    isolation mode? would be great when editing library items
		-	ghost unselected regions
	
	----	symbols
		---- maybe implement a mixin system instead of relying on yaml mixins somehting more powerful like a  prototype with overridable properties

	-	Document
		-	Implement settings/prefs as properties (different key `settings` for not regionlike things?) on document (maybe using load on top of default document)

	-	ui overlay/inspector
		- fix dimension units

	

	---- 	laser export
		---	define style in Document properties
		-	export for lasercutter (auto layout and exporitng with defined style)
		-	asign output tags to shapes (kind of like a css class) to determine how they are output in build/export (outputGroup: cut | etch)



@	Low Priority Features
	-	Documentation Integration
	-	can we switch the lib folders to npm --save-dev installs and browserify in things instead of having them at the top of the page? is that even a good idea?

	-	Log should route main appends thorugh single depend to DRY
	-	revisit bindall to make event handlers not require bind on call
		-	naming convention for handlers (onBlahBlah)?


	-	text labels in preview? this even worth doing/ cool auto docmentation illustration generation

	-	save and load file? cant save and load from harddrive unless an app, consider dropbox/drive integration? consider storing files on server? **COPY PASTE WORKS FOR NOW, SADLY**


	-----	expressions in attributes
		- units: 2in, 2cm
		- percents: 30%
		- math: 2+2in
		- access exiting variables: bounds.left + 20




Design Decisions
	-	size never considers children, only parent context
	-	inspired by openscad, -illustrator, html/css, flash symbols
	-	like a text editor vs word processor for vector (minimizing styling)

QUESTIONS
	-	sibling relative positioning: what are some options?



OVERHAUL Context system
=====
+-	change context to be current matrix relative always. 
+-	drop the position from context (thats part of translate)
+-	merge context into region? maybe think of context as a light version of the region, passed to children with only the information they should have access too

+--	should preview and draw need to transform their drawing or should that be handled upstream?
+--	get preview and draw working
+-- 	should rectangles and ellipses be allowed children?

+--	defaults for region properties
+--	add list of supported properties, have it log warnings if you use ones it don't know

UI
=====
+---	rollover inspection 
+-	zoom/pan
+-	the svg output should be its own paper.project or paper.view probably


Shapes
+-	rectangle
+-	ellipse
-	vertical_line
-	horizontal_line
-	regular polygon (hexagon, ...)
-	polygon as array of points
--	import svg

Transform
--	translate
+---	rotate
--	scale
--	mirror

Booleans
+-	union
+-	difference
+-	intersection
-	sibling union?
-	sibling difference?
-	sibling interseciton?

Positioning
-	min/max width/height: 
-	combined attributes: margin: 0 sets top/left/bottom/right


Region (basic unit of position & transforming)

Special Regions
-	region_grid
	- every child every squre, or once child per square, repeating
-	auto arrange: takes children and packs them into space

Manipulation
-	offset paths: move points along normals.
-	randomize


Language Features
--	units and percenteges: margin_left: 10cm, margin_right: 20%


-	remove overlapping line segments: good for lasercut prep




Features
-	control of grouping in output
-	draw names/labels on output?
-	Greg Font (line / not shape) Sutton

-	Mathmatic Expressions
	-	With variables from context

- 	hull
-	minkowski

-	reconsider yaml format
-	include other yaml (user libraries, etc)
-	look into custom yaml handlers



Sketching:
-	Openscad is awesome
-	YAML is suprisingly powerful and awesome
-	Illustrator is frustrating
-	Comb Script
	The BEST Way to Design a Comb

-	Declaritve progamming

