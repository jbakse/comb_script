+-	export svg

+-	refactor UI/main
+-	factor main into a class
+-	settings.js hold color paletes defaults etc.

-	selection mirroing stuff
	-	make less glitch
		-	try auto building as you type (but only if it compiles okay)

+-	search tree buisness should be improved. keep a datastruture that makes looking up nodes by line range super easier

-	refactoring
	+-	maybe just make calls on controller for now, these will be turned into having controller listen for dispatched events later. get some event dispatching in there to decouple user interaction mcv style
	-	language.js file that has the lists of regions types and their params etc. helpful in reporting issues after parse and might be tied into documentation system
	-	revisit bindall to make event handlers not require bind on call
		-	naming convention for handlers (onBlahBlah)?
	-	Log should route main appends thorugh single depend to DRY


-	build/preview modes

-	text labels in preview

-	ui overlay/inspector (shows info not in your code)
	- fix zero point

-	consider how language works
	-	mixed boolean mode
	-	decide.. first child booelan vs parent boolean vs parent then first child (how it works now)

-	pan/zoom

+-	make a nice ul based UI logging system

-	greg font / text region

-	export for lasercutter (auto layout and exporitng iwht defined style)

-	import svg

-	lets move away from having regions/ellipses/rects etc have their own color, and more towards having a global colorscheme that they use. also consider colorcoding booelans. 

-	asign output tags to shapes (kind of like a css class) to determine how they are output in build/export (outputGroup: cut|etch)

-	save and load file? cant save and load from harddrive unless an app, consider dropbox/drive integration? consider storing files on server?

-	can we switch the lib folders to npm --save-dev installs and browserify in things instead of having them at the top of the page? is that even a good idea?

-	Looks like Region, might just be a paper.Group could potentially rebuild main "scene graph" approach with groups. Might be much better.


- Styles need for preview
	Bounds
	Shape
	Position (registration)
	*
	Selected
	Ghost
	Hover
	Idle

	Can these cascade a bit like css?

Design Decisions
-	size never considers children, only parent context
-	inspired by openscad, -illustrator, html/css, flash symbols
-	like a text editor vs word processor for vector (minimizing styling)

QUESTIONS
-	sibling relative positioning: what are some options?

First Priority

+----	Github it

OVERHAUL Context system
=====
+-	change context to be current matrix relative always. 
+-	drop the position from context (thats part of translate)
-	merge context into region? maybe think of context as a light version of the region, passed to children with only the information they should have access too
-	have a "cascading" properties in the context for variables, etc.

+--	should preview and draw need to transform their drawing or should that be handled upstream?
+--	get preview and draw working
+-- 	should rectangles and ellipses be allowed children?

--	defaults for region properties
--	add list of supported properties, have it log warnings if you use ones it don't know

UI
=====
---	rollover inspection 
-	zoom/pan
-	the svg output should be its own paper.project or paper.view probably


Shapes
+-	rectangle
+-	ellipse
-	vertical_line
-	horizontal_line
-	regular polygon (hexagon, ...)
-	polygon as array of points
--	import svg

Transform
--	translate
+---	rotate
--	scale
--	mirror

Booleans
+-	union
+-	difference
+-	intersection
-	sibling union?
-	sibling difference?
-	sibling interseciton?

Positioning
-	min/max width/height: 
-	combined attributes: margin: 0 sets top/left/bottom/right


Region (basic unit of position & transforming)

Special Regions
-	region_grid
	- every child every squre, or once child per square, repeating
-	auto arrange: takes children and packs them into space

Manipulation
-	offset paths: move points along normals.
-	randomize


Language Features
--	units and percenteges: margin_left: 10cm, margin_right: 20%


-	remove overlapping line segments: good for lasercut prep





Features
-	control of grouping in output
-	draw names/labels on output?
-	Greg Font (line / not shape) Sutton

-	Mathmatic Expressions
	-	With variables from context

- 	hull
-	minkowski

-	reconsider yaml format
-	include other yaml (user libraries, etc)
-	look into custom yaml handlers



Sketching:
-	Openscad is awesome
-	YAML is suprisingly powerful and awesome
-	Illustrator is frustrating
-	Comb Script
	The BEST Way to Design a Comb


