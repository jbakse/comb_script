section#introduction
	:markdown
		# Introduction

		CombScript is a language for describing technical vector designs and a tool that exports these designs as SVG files. A primary goal of CombScript is to express designs naturally, so they are easier to adjust and customize.

		CombScript was inspired by [OpenSCAD](http://www.openscad.org/), CSS, HTML, and Adobe Illustrator snapping shenanigans.

		
		-   ###Parametric

			CombScript documents can use relative positioning and simple math to express flexible designs that can can be easily customized by tweaking parameters.

		-   ###Expressive

			Positions can be described in multiple ways allowing more natural expression. For example you can specify that a circle is 10 units from the right side of its container and vertically centered, rather than expressing its global coordinates.

		-   ###Declarative

			CombScript is more like HTML than JavaScript. A CombScript document describes a design, not the steps required to make it.

		-   ###Unstyled

			Shapes in CombScript represent only the path data and don't have their own style properties like fill-color, stroke-color, or stroke-width. CombScript is primarily designed for designs that describe paths for laser-cutters and plotters where such styles are not needed.

		-   ###Boolean Operations

			Complex shapes are created by combining simple shapes using boolean operations like intersection, union, and difference.

		-   ###Export to SVG

			Shape data can be exported as `.svg` files.




section#syntax
	:markdown
		# Basic Syntax
		CombScript syntax is based on [YAML](http://en.wikipedia.org/wiki/YAML), a common and human-readable data-file format. CombScript builds on YAML with predefined keywords to describe designs and support for mathematic expressions.

		Here is an example of a simple CombScript document that draws an ellipse:

	pre.display.comb-script
		include examples/basic_syntax.yaml

	:markdown

		This example begins by defining an optional document property, `name`, which is used when exporting. Document properties are defined using the `properties:` key followed by a set of indented **key: value** pairs.

		Next, the example defines its children under the `children:` key. The children are indented one level and each is prefixed with a `-` to indicate a YAML array item. There are several types of children in CombScript including regions, rectangles, and ellipses. 

		This document has one child, an `ellipse`. The ellipse has `width` and `height` properties which set its dimensions.

		The very first line of the document is a **comment**. Comments start with `#` and are ignored by CombScript. Use comments to leave helpful notes for human readers.




section#regions
	:markdown
		# Regions
		The basic building-blocks in CombScript are called regions. A region describes a rectangular bounds in the drawing and can contain child regions. Child regions are laid out in relation to the bounds of their parent.

		There are several types of regions in CombScript. The basic `region` type is primarily organizational. It is used to define a new part of the drawing and to group its children. The basic `region` will not generate a vector shape in the exported SVG. 

		The `rectangle` or `ellipse` region types can do everything that a plain `region` can do, and also draw a shape in the export.


		## Region Bounds
		Every region has a set of bounds that describe a rectangular area in the drawing. These bounds can be set using the `top`, `left`, `bottom`, and `right` properties. These values are relative to the **registration position** of the region's parent.

		A region's bounds can also be specified relative to the parent's **bounds** using `margin_top`, `margin_left`, `margin_bottom`, and `margin_right` properties.

		You can specify the dimensions of a region's bounds with the `width` and `height` properties.

		These properties can be mixed any way you wish, as long as they don't conflict.

	pre.display.comb-script
		include examples/region_bounds.yaml


	:markdown
		## Children

		Regions can have any number of child regions. A region's bounds, registration, and transform are used by when positioning its children. Using nesting, you can describe the positional relationships of your shapes making parts of your design parametric. 

		In the following example the position of the two ellipses is determined by the width of their parent.



	pre.display.comb-script
		include examples/children.yaml

	:markdown
		## Registration
		Regions can optionally set their registration position with the `registration` property. The new registration position will be used by the region's children when laying out their bounds. It will also be used as the pivot point for rotations and scales applied to the region.

		The default value of `registration` is `parent` which will keep the registration position set by the region's parent. Other values, such as 'top_left' and 'center' move it to a position determined by the region's bounds.

		In this example, the outer region does not have a set `registration` property and the rectangle is positioned relative to the document's registration position (the center).

	pre.display.comb-script
		include examples/registration_default.yaml

	:markdown
		In the following two examples the outer regions have set `registration` values explicitly, and the rectangle is positioned accordingly.

	pre.display.comb-script
		include examples/registration_top_right.yaml

	pre.display.comb-script
		include examples/registration_top_left.yaml




	:markdown
		## Transformations
		You can transform the coordinate system used by a region and its children using the `rotation`, `scale_x`, and `scale_y` properties. A region's transforms are inherited by its children.

	pre.display.comb-script
		include examples/transformations.yaml


section#property-types
	:markdown
		# Property Types

		Different region properties have different required types. These types include dimensions, angles, numbers, and strings.

		## Dimensions

		Dimensions are the most common property type. When specifying the value for a dimension property, you must include a linear unit such as `inches`, `millimeters`, or `pixels`. Units can also be given with their common abbreviation: `in`, `mm`, `px`. You don't have to use the same unit for every property, choose the unit that makes the most sense.

	pre.comb-script
		| margin_top: 1cm
		| width: .25in
		| height: .25in

	:markdown
		## Angles

		Angle property values must include an angular unit such as `degrees` or `radians`.

	pre.comb-script
		| rotation: 25deg

	:markdown

		## Numbers

		Some properties require a simple number value, and should not include a unit label.

	pre.comb-script
		| scale_x: 2.5
		| sides: 4
		| rows: 2

	:markdown
		## Strings

		Some properties require a string (text) value. Placing quotes around strings is generally optional, but you may need them if your text is a number or includes special characters.

	pre.comb-script
		| registration: top_left
		| boolean: add
		| name: table_leg
		| name: "10"
		| name: "table/front"

section#using-math

	:markdown
		# Using Math

		You can use mathematic expressions in `dimension`, `angle`, and `number` property values. Combscript uses the [mathjs](http://mathjs.org/) library for evaluating expressions. Check out the [mathjs expression syntax documentation](http://mathjs.org/docs/expressions/syntax.html) for details.


		## Expressions
		
		You can use expressions like `4 * .7` and `(1 + 2) * 3in`. You can mix dimensions like `1in + 2mm`. 


		The result of the expression must have a legal unit for the property. You can't set a `width` to `2in * 2in` because the result is 4 **square inches**, which is not a legal linear dimension.

	pre.display.comb-script
		include examples/expressions.yaml

	:markdown
		## Functions

		You can use common math functions like `sin`, `cos`, `max`, and `round` in expressions.

	pre.display.comb-script
		include examples/functions.yaml


	:markdown
		## Accessing Parent Bounds

		Regions can reference their parent's bounds using special variables in expressions. CombScript provides the following variables:  `parent_height`, `parent_width`, `parent_left`, `parent_right`, `parent_top`, `parent_bottom`.


	pre.display.comb-script
		include examples/parent_bounds.yaml

	
	:markdown
		## User Constants
		Constants are user defined values that can be used as property values and referenced in expressions.

	pre.display.comb-script
		include examples/constants.yaml

	:markdown
		In the previous example, the `my_size` constant was declared on the document. If you declare a constant on a region, it will be available only in that region and its children. 

	pre.display.comb-script
		include examples/constants_shadowing.yaml



section#booleans
	:markdown
		# Booleans & Combining Shapes
		Shapes can be combined using the `boolean` property. The possible values are `add`, `subtract`, `intersect` and `pass`

		The following examples show how each boolean operation behaves.

		##Add

	pre.display.comb-script
		include examples/boolean_add.yaml

	:markdown
		##Subtract

	pre.display.comb-script
		include examples/boolean_subtract.yaml

	:markdown
		##Intersect

	pre.display.comb-script
		include examples/boolean_intersect.yaml

	:markdown
		##Mixing
		It's possible to perform multiple boolean operations on the same shape. Boolean operations will be applied in order, descending through a regions children. In this example the ellipse is subtracted from the rectangle, then the smaller ellipse is added.

	pre.display.comb-script
		include examples/boolean_mixing.yaml

	:markdown
		##Many to Many
		Boolean operations will be applied to a region's children as well. For example you can subtract many shapes from a single shape, subtract a single shape from many shapes, or even subtract many shapes from many shapes.

	pre.display.comb-script
		include examples/boolean_many_to_many.yaml

	:markdown
		##Boolean Flow
		Shapes with a set `boolean` property are combined with their parent's shape. If the parent does not generate a shape the shape of the first child will be used. **[pictures here]**

		##Pass
		The `pass` value will pass the boolean operations through to the parent region's scope?

	pre.display.comb-script
		include examples/boolean_pass.yaml

	:markdown
		##Trapping
		Trapping allows you to slightly adjust the bounds in which a shape is drawn. The trapping value will be added to the bounds of the region. Trapping is primarily used when performing a boolean on two shapes that are exactly next to each other, adding a small trapping value to one of the shapes will ensure that the shapes overlap and that the boolean is successful.

		Trapping values should be tiny (hundredths or thousandths of a unit). In this example the trapping has been set quite high to illustrate the effect.

	pre.display.comb-script
		include examples/boolean_trapping.yaml




section#using-region-grids
	:markdown
		# Using Region Grids
		**[needs editing]**CombScript provides a special region-type called a `region_grid`. Region grids can be used to draw a region repeatedly in a rectangular grid.

		The `rows` and `columns` properties will set the number of rows and columns in the grid directly. You can set `row_height` and `column_width` instead to create as many rows or columns as needed to fill the region grid.

		Each cell in the generated grid will contain a clone of the children of the region grid.

	pre.display.comb-script
		include examples/regiongrid_simple.yaml


section#yaml-repeated-nodes

	:markdown
		# YAML Repeated Nodes

		YAML's [repeated node](http://yaml.org/spec/1.2/spec.html#id2760395) feature can be used to to create named parameters and library shapes that can be used throughout your document. Repeated nodes are defined with `&` followed by a name, and used with `*` followed by the name. Repeated nodes are can be defined pretty much anywhere throughout the document, but it's a good practice to define them as an array under the `library:` key.

		It is common that you will reuse the same shape in multiple places in your document. Repeated nodes can represent entire regions, their properties, and even nested children. Each repeated node will be separately laid out in their parent's context.
		
	pre.display.comb-script
		include examples/library_items.yaml

section#exporting

	:markdown
		# Exporting

		lorem ipsum

section#language-reference
	h1.bump Language Reference

	//- p The following is a list of the CombScript region types and their available properties.
