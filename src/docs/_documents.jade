:markdown
    # Writing Comb Script
    Comb Script documents are written in [YAML](http://en.wikipedia.org/wiki/YAML), a common and human-readable data-file format. Comb Script recognizes predefined keywords to describe regions, shapes, and their properties. 

    Here is an example of a simple Comb Script document that draws an ellipse:

pre.display
    include examples/ellipse_simple.yaml

:markdown

    This example begins by defining two document properties, `width` and `height` that describe the dimensions of the document. If these properties are not defined, defaults will be used. Document properties are defined using the `properties:` key followed by a set of indented **key: value** pairs.

    After the document properties, this example defines an `ellipse` as a child. There are several types of children in Comb Script including regions, rectangles, and ellipses. Document children are defined using the `children:` key. The children are indented one level and prefixed with a `-` to indicate a YAML array.

    Like the document, the ellipse defines `width` and `height` properties to set its dimensions.


:markdown

    # Regions
    The core element of a Comb Script document is a `region`. A region describes a rectangular area in the drawing and and can contain child regions. The basic `region` type is primarily organizational and will not generate a vector shape in the exported SVG. To create a exported shape, you can use a specialized region-type such as `rectangle` or `ellipse`.


    ## Region Bounds
    Every region has a set of boundaries that describe a rectangular area in the drawing. These boundaries can specified using the current coordinate system using the `top`, `left`, `bottom`, and `right` properties.

    A region's bounds can also be specified relative to the parent's bounds using `margin-top`, `margin-left`, `margin-bottom`, and `margin-right` properties.

    You can specify the dimensions of the bounds with the `width` and `height` properties.

    You can mix these properties any way you wish, as long as they don't conflict.

    ```
    children:
    - region:
    properties:
    top: -100
    left: -100
    bottom: 100
    right: 100
    ```

    ## Registration
    Regions can optionally set position of the origin (position 0, 0) of the coordinate system with the `registration` property. The new origin will apply to the regions children. The default value of `registration` is `parent` which will keep the location of the origin set by the region's parent. Other values, such as 'top_left' and 'center' move the origin relative to the Region's bounds.

    ```
    children:
    - region:
    properties:
    width: 100
    height: 100
    registration: top_left
    children:
    - ellipse:
        properties:
        width: 100
        height: 100
    ```


    ## Nesting

    You can nest.

pre.display
    include examples/nesting_simple.yaml

:markdown
    Like this.

    # Building

    You can build.
